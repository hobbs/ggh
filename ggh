#!/bin/bash
#
# ggh -- git-gerrit helper
#
#


show_usage () {
    echo '
ggh - git-gerrit helper - 0.1

"ggh setup"  - Setup the git aliases listed below in your global git config.  Note, each git alias just calls through to ggh with the arguments passed in.  So ggh could be used directly without the git aliases.

Git Aliases

"git gerrit-clone <url>" ---> git clone <url>, then setup post-commit hook

"git start <local branch> <remote branch>" ---> git checkout -b $1 origin/$2

"git upload" ---> show summary of changes to be uploaded, approve, upload

"git prune-branches" ----> remove all branches not ahead of the remote.'

}

cmd_setup () {

    type -P ggh &>/dev/null || { echo "ggh must be in your PATH var in order to be setup." >&2; exit 1; }

    type -P git &>/dev/null || { echo "git must be in your PATH var in order to be setup." >&2; exit 1; }

    echo "Setting up 'git gerrit-clone'"
    git config --global alias.gerrit-clone '!bash ggh gerrit-clone'

    echo "Setting up 'git start'"
    git config --global alias.start '!bash ggh start'

    echo "Setting up 'git upload'"
    git config --global alias.upload '!bash ggh upload'

    echo "Setting up 'git prune-branches'"
    git config --global alias.prune-branches '!bash ggh prune-branches'

    echo "Done."

}

cmd_gerrit_clone () {
    cur_name=`git config user.name`
    cur_email=`git config user.email`

    echo
    echo -n "Name [$cur_name]:"
    read name
    echo -n "Email [$cur_email]:"
    read email
    echo

    git clone $1
    project=`echo $1 | sed -E "s/.*\///" | sed -E "s/\.git$//"`
    port=`echo $1 | sed -E "s/.*:([0-9]*).*/\1/"`
    gerrit=`echo $1 | sed -E "s/ssh:\/\/([^:\/]*).*/\1/"`
    cd $project

    if [ -z "$port" ]
    then
        scp $gerrit:hooks/commit-msg .git/hooks
    else
        scp -p -P $port $gerrit:hooks/commit-msg .git/hooks
    fi

    local_branch=`git symbolic-ref HEAD | sed -e 's|^refs/heads/||'`
    git config branch.autosetuprebase always
    git config branch.$local_branch.rebase true

    if [ -z "$name" ]
    then
        name=$cur_name
    fi

    if [ -z "$email" ]
    then
        email=$cur_email
    fi

    git config user.name "$name"
    git config user.email "$email"

}

cmd_start () {
    remote_branch=$2
    if [ -z "$remote_branch" ]
    then
        #if we are already on a remote branch - use it as a starting point
        local_branch=`git symbolic-ref HEAD | sed -e 's|^refs/heads/||'`
        remote_branch=`git config branch.$local_branch.merge | sed -e 's|^refs/heads/||'`

        if [ "$local_branch" != "$remote_branch" ]
        then
            echo "Please specify remote branch. git start <local_branch> <remote_branch>"
            exit 1
        fi
    fi
    git checkout -b $1 origin/$remote_branch
}

cmd_upload () {
    ensure_status_clean

    local_branch=`git symbolic-ref HEAD | sed -e 's|^refs/heads/||'`
    remote_branch=`git config branch.$local_branch.merge | sed -e 's|^refs/heads/||'`

    if [ -z "$remote_branch" ]
    then
        echo "ggh error: This branch is not tracking a remote branch, upload not possible."
        exit 1
    fi

    # make sure you don't need to pull from origin
    git fetch origin
    behind=`git log --oneline "origin/$remote_branch" ^$local_branch`
    if [ -n "$behind" ]
    then
        echo "Can not upload changes, your branch is behind origin/$remote_branch.  Please rebase changes before uploading to avoid merge conflicts: git rebase origin/$remote_branch"
        exit 1
    fi

    #show preview
    git log --graph --stat origin/$remote_branch..

    #make user confirm upload
    echo
    echo -n "Are you sure you would like to upload these changes for review? [y/N]"
    read -n1 answer
    echo

    if [ -z "$answer" ]
    then
        answer="n"
    fi

    # push if they said yes
    if [ "$answer" == "y" -o "$answer" == "Y" ]
    then
        git push origin HEAD:refs/for/$remote_branch
    else
        echo "Aborting upload."
    fi

}

cmd_prune () {
    ensure_status_clean
    git fetch origin

    #lets not try to delete the branch you're on
    current_branch=`git symbolic-ref HEAD | sed -e 's|^refs/heads/||'`

    for branch in $(git for-each-ref --format='%(refname)' refs/heads/); do
    simple_branch=`echo $branch | sed -e 's|^refs/heads/||'`
    remote=`git config branch.$simple_branch.merge | sed -e 's|^refs/heads/||'`

    #don't delete branches that aren't tracking remotes
    if [ -z "$remote" ]
    then
        continue
    fi

    diff=`git log --oneline "$branch" ^origin/$remote`
    if [ -z "$diff" -a "$simple_branch" != "$remote" ]
    then
        #if the current branch have to be pruned - switch to its parent first
        if [ "$simple_branch" == "$current_branch" ]
        then
            git checkout $remote
        fi
        git branch -D $simple_branch
    fi
    done

}

ensure_status_clean () {
    #check for clean status
    status=`git status -s`
    if [ -n "$status" ]
    then
        echo "ggh error: Could not complete command. Git status is not clean, please commit or stash changes and try again."
    exit 1
    fi
}

case "$1" in
    setup)
        cmd_setup
        ;;

    gerrit-clone)
        cmd_gerrit_clone $2
        ;;

    start)
        cmd_start $2 $3
        ;;

    upload)
        cmd_upload
        ;;

    prune-branches)
        cmd_prune
        ;;

    *)
        show_usage
        ;;

esac
